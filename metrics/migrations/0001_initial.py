# Generated by Django 3.2.19 on 2023-06-21 16:20

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='Browser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=64, unique=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Campaign',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('inactive', models.BooleanField(default=False)),
                ('uid', models.CharField(blank=True, max_length=128, null=True)),
                ('usabilla_button_id', models.CharField(blank=True, max_length=128, null=True)),
                ('key', models.CharField(blank=True, max_length=128, null=True, unique=True)),
                ('latest_response_date', models.DateTimeField(blank=True, null=True)),
                ('latest_feedback_response_date', models.DateTimeField(blank=True, null=True)),
                ('latest_other_response_date', models.DateTimeField(blank=True, null=True)),
                ('vote_response_count', models.PositiveIntegerField(default=0)),
                ('feedback_response_count', models.PositiveIntegerField(default=0)),
                ('other_response_count', models.PositiveIntegerField(default=0)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='campaign_created_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['uid'],
            },
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=64, unique=True)),
            ],
            options={
                'verbose_name_plural': 'Cities',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=64, unique=True)),
            ],
            options={
                'verbose_name_plural': 'Countries',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='DataSource',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=64, unique=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='data_source_created_by', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='data_source_updated_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='DeviceType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=32, unique=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Domain',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=64, unique=True)),
                ('admins', models.ManyToManyField(blank=True, related_name='domain_admins', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='domain_created_by', to=settings.AUTH_USER_MODEL)),
                ('lead', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='domain_lead', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='domain_updated_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='FeedbackResponseKeyword',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=64)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='GoalCompleted',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=32, unique=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='GoalCompletedCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=32, unique=True)),
                ('min_score_range', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('max_score_range', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('color_code', models.CharField(max_length=32)),
                ('text_color_code', models.CharField(blank=True, max_length=32, null=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='goal_completed_category_created_by', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='goal_completed_category_updated_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Goal completed categories',
                'ordering': ['-max_score_range'],
            },
        ),
        migrations.CreateModel(
            name='NpsScoreCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=32, unique=True)),
                ('min_score_range', models.FloatField(validators=[django.core.validators.MinValueValidator(-100), django.core.validators.MaxValueValidator(100)])),
                ('max_score_range', models.FloatField(validators=[django.core.validators.MinValueValidator(-100), django.core.validators.MaxValueValidator(100)])),
                ('color_code', models.CharField(blank=True, max_length=32, null=True)),
                ('text_color_code', models.CharField(blank=True, max_length=32, null=True)),
                ('ux_points', models.PositiveIntegerField(default=0)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='nps_score_category_created_by', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='nps_score_category_updated_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'NPS category',
                'verbose_name_plural': 'NPS categories',
                'ordering': ['-max_score_range'],
            },
        ),
        migrations.CreateModel(
            name='OperatingSystem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=32, unique=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='PrimaryGoal',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=128, unique=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('inactive', models.BooleanField(default=False)),
                ('name', models.CharField(max_length=64, unique=True)),
                ('priority', models.IntegerField(blank=True, choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5')], null=True)),
                ('private_comments', models.BooleanField(default=False)),
                ('url', models.URLField(blank=True, max_length=255, null=True)),
                ('estimated_num_users', models.PositiveIntegerField(blank=True, null=True)),
                ('core_project', models.BooleanField(default=False)),
                ('vendor_app', models.CharField(blank=True, choices=[('no', 'No'), ('yes', 'Yes')], default='', max_length=3)),
                ('comments', models.TextField(blank=True)),
                ('api_key', models.CharField(blank=True, max_length=16, null=True)),
                ('admins', models.ManyToManyField(blank=True, help_text='Admins have full edit access to the project info, can add other admins and editors, and can see emails in responses', related_name='project_admins', to=settings.AUTH_USER_MODEL)),
                ('contact', models.ForeignKey(blank=True, help_text='Contact is the owner and has full edit access to the project info, can add other admins and editors, and can see emails in responses', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='project_contact', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='project_created_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ProjectKeyword',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=64, unique=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=64, unique=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='State',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=64, unique=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Target',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('nps_score', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(-100), django.core.validators.MaxValueValidator(100)])),
                ('umux_score', models.FloatField(blank=True, null=True)),
                ('achieve_target', models.FloatField(blank=True, null=True)),
                ('exceed_target', models.FloatField(blank=True, null=True)),
            ],
            options={
                'ordering': ['-nps_score', '-umux_score'],
            },
        ),
        migrations.CreateModel(
            name='Url',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('url', models.TextField(max_length=5000)),
            ],
            options={
                'ordering': ['url'],
            },
        ),
        migrations.CreateModel(
            name='UserRole',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=64, unique=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='UmuxScoreCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=32, unique=True)),
                ('min_score_range', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('max_score_range', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('color_code', models.CharField(max_length=32)),
                ('text_color_code', models.CharField(blank=True, max_length=32, null=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='umux_score_category_created_by', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='umux_score_category_updated_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'UMUX score category',
                'verbose_name_plural': 'UMUX score categories',
                'ordering': ['-max_score_range'],
            },
        ),
        migrations.CreateModel(
            name='Response',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('uid', models.CharField(max_length=128, unique=True)),
                ('date', models.DateTimeField(db_index=True)),
                ('nps', models.SmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('nps_category', models.CharField(blank=True, choices=[('promoter', 'Promoter'), ('passive', 'Passive'), ('detractor', 'Detractor')], db_index=True, max_length=12)),
                ('umux_capability', models.SmallIntegerField(blank=True, db_index=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(7)])),
                ('umux_ease_of_use', models.SmallIntegerField(blank=True, db_index=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(7)])),
                ('umux_score', models.FloatField(blank=True, null=True)),
                ('improvement_suggestion', models.TextField(blank=True)),
                ('primary_goal_other', models.TextField(blank=True)),
                ('goal_not_completed_reason', models.TextField(blank=True)),
                ('comments', models.TextField(blank=True)),
                ('email_provided', models.BooleanField(default=False)),
                ('location', models.CharField(blank=True, max_length=128)),
                ('total_time', models.PositiveIntegerField(default=0)),
                ('raw_data', models.JSONField()),
                ('browser', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='response_browser', to='metrics.browser')),
                ('campaign', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='response_campaign', to='metrics.campaign')),
                ('city', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='response_city', to='metrics.city')),
                ('country', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='response_country', to='metrics.country')),
                ('device_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='response_device_type', to='metrics.devicetype')),
                ('goal_completed', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='response_goal_completed', to='metrics.goalcompleted')),
                ('operating_system', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='response_operating_system', to='metrics.operatingsystem')),
                ('primary_goal', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='response_primary_goal', to='metrics.primarygoal')),
                ('state', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='response_state', to='metrics.state')),
                ('submitted_url', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='response_submitted_url', to='metrics.url')),
                ('user_role', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='response_user_role', to='metrics.userrole')),
            ],
            options={
                'ordering': ['campaign', '-date'],
            },
        ),
        migrations.CreateModel(
            name='ProjectYearSetting',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('year', models.PositiveIntegerField(default=2023)),
                ('nps_target', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(-100), django.core.validators.MaxValueValidator(100)])),
                ('nps_target_exceed', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(-100), django.core.validators.MaxValueValidator(100)])),
                ('nps_baseline', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(-100), django.core.validators.MaxValueValidator(100)], verbose_name='NPS baseline')),
                ('nps_baseline_created_at', models.DateTimeField(blank=True, null=True, verbose_name='NPS baseline created at')),
                ('nps_baseline_response_count', models.PositiveIntegerField(blank=True, null=True, verbose_name='NPS baseline reponse count')),
                ('nps_baseline_margin_error', models.FloatField(blank=True, null=True, verbose_name='NPS baseline MOE')),
                ('nps_baseline_entry_type', models.CharField(blank=True, choices=[('automatic', 'Automatic'), ('manual', 'Manual')], max_length=12)),
                ('nps_baseline_from', models.CharField(blank=True, max_length=64, verbose_name='NPS baseline from')),
                ('nps_baseline_last_response_at', models.DateTimeField(blank=True, null=True, verbose_name='NPS baseline last response')),
                ('nps_baseline_response_day_range', models.PositiveIntegerField(blank=True, null=True)),
                ('nps_baseline_notes', models.TextField(blank=True, verbose_name='NPS baseline notes')),
                ('umux_target', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('umux_target_exceed', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('umux_baseline', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='UMUX baseline')),
                ('umux_baseline_created_at', models.DateTimeField(blank=True, null=True, verbose_name='UMUX baseline created at')),
                ('umux_baseline_response_count', models.PositiveIntegerField(blank=True, null=True, verbose_name='UMUX baseline reponse count')),
                ('umux_baseline_margin_error', models.FloatField(blank=True, null=True, verbose_name='UMUX baseline MOE')),
                ('umux_baseline_entry_type', models.CharField(blank=True, choices=[('automatic', 'Automatic'), ('manual', 'Manual')], max_length=12)),
                ('umux_baseline_from', models.CharField(blank=True, max_length=64, verbose_name='UMUX baseline from')),
                ('umux_baseline_last_response_at', models.DateTimeField(blank=True, null=True, verbose_name='UMUX baseline last response')),
                ('umux_baseline_response_day_range', models.PositiveIntegerField(blank=True, null=True)),
                ('umux_baseline_notes', models.TextField(blank=True, verbose_name='UMUX baseline notes')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='project_year_setting_created_by', to=settings.AUTH_USER_MODEL)),
                ('nps_baseline_score_category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='project_year_setting_nps_baseline_score_category', to='metrics.npsscorecategory')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='project_year_setting_project', to='metrics.project')),
                ('umux_baseline_score_category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='project_year_setting_umux_baseline_score_category', to='metrics.umuxscorecategory')),
                ('updated_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='project_year_setting_updated_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-year', 'project'],
            },
        ),
        migrations.CreateModel(
            name='ProjectSnapshot',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('entry_type', models.CharField(blank=True, choices=[('manual', 'Manual'), ('automatic import', 'Automatic import')], default='manual', max_length=20)),
                ('date', models.DateField(blank=True, null=True)),
                ('date_period', models.CharField(blank=True, choices=[('month', 'Month'), ('quarter', 'Quarter'), ('last90', 'Last 90 days')], default='quarter', max_length=12)),
                ('date_quarter', models.PositiveIntegerField(blank=True, null=True)),
                ('date_month', models.PositiveIntegerField(blank=True, null=True)),
                ('nps_score', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(-100), django.core.validators.MaxValueValidator(100)])),
                ('nps_score_date', models.DateTimeField(blank=True, null=True)),
                ('nps_count', models.PositiveIntegerField(blank=True, null=True)),
                ('nps_promoter_count', models.PositiveIntegerField(blank=True, null=True)),
                ('nps_passive_count', models.PositiveIntegerField(blank=True, null=True)),
                ('nps_detractor_count', models.PositiveIntegerField(blank=True, null=True)),
                ('nps_margin_error', models.FloatField(blank=True, null=True)),
                ('nps_margin_error_lower', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(-100), django.core.validators.MaxValueValidator(100)])),
                ('nps_margin_error_upper', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(-100), django.core.validators.MaxValueValidator(100)])),
                ('nps_meaningful_data', models.BooleanField(default=False)),
                ('umux_score', models.FloatField(blank=True, null=True)),
                ('umux_score_date', models.DateTimeField(blank=True, null=True)),
                ('umux_count', models.PositiveIntegerField(blank=True, null=True)),
                ('umux_scores_sum', models.FloatField(blank=True, null=True)),
                ('umux_capability_avg', models.FloatField(blank=True, null=True)),
                ('umux_ease_of_use_avg', models.FloatField(blank=True, null=True)),
                ('umux_margin_error', models.FloatField(blank=True, null=True)),
                ('umux_margin_error_lower', models.FloatField(blank=True, null=True)),
                ('umux_margin_error_upper', models.FloatField(blank=True, null=True)),
                ('umux_meaningful_data', models.BooleanField(default=False)),
                ('goal_completed_percent', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('goal_completed_date', models.DateTimeField(blank=True, null=True)),
                ('goal_completed_count', models.PositiveIntegerField(blank=True, null=True)),
                ('response_day_range', models.PositiveIntegerField(blank=True, null=True)),
                ('meaningful_response_count', models.PositiveIntegerField(blank=True, null=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='project_snapshot_created_by', to=settings.AUTH_USER_MODEL)),
                ('data_source', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='project_snapshot_data_source', to='metrics.datasource')),
                ('goal_completed_category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='project_snapshot_goal_completed_category', to='metrics.goalcompletedcategory')),
                ('nps_score_category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='project_snapshot_nps_score_category', to='metrics.npsscorecategory')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='project_snapshot_project', to='metrics.project')),
                ('umux_score_category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='project_snapshot_umux_score_category', to='metrics.umuxscorecategory')),
                ('updated_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='project_snapshot_updated_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['project', '-date'],
            },
        ),
        migrations.CreateModel(
            name='ProjectEvent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255)),
                ('date', models.DateField()),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='project_event_created_by', to=settings.AUTH_USER_MODEL)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='project_event_project', to='metrics.project')),
                ('updated_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='project_event_updated_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['project', '-date'],
            },
        ),
        migrations.AddField(
            model_name='project',
            name='current_year_settings',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='project_current_year_settings', to='metrics.projectyearsetting'),
        ),
        migrations.AddField(
            model_name='project',
            name='currently_reporting_snapshot',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='project_currently_reporting_snapshot', to='metrics.projectsnapshot'),
        ),
        migrations.AddField(
            model_name='project',
            name='domain',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='project_domain', to='metrics.domain'),
        ),
        migrations.AddField(
            model_name='project',
            name='editors',
            field=models.ManyToManyField(blank=True, help_text='Editors can only create/edit manual snapshots and can see emails in responses', related_name='project_editors', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='project',
            name='keywords',
            field=models.ManyToManyField(blank=True, related_name='project_keywords', to='metrics.ProjectKeyword'),
        ),
        migrations.AddField(
            model_name='project',
            name='latest_snapshot_by_date',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='project_latest_snapshot_by_date', to='metrics.projectsnapshot'),
        ),
        migrations.AddField(
            model_name='project',
            name='latest_valid_currently_reporting_snapshot',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='project_latest_valid_currently_reporting_snapshot', to='metrics.projectsnapshot'),
        ),
        migrations.AddField(
            model_name='project',
            name='latest_valid_snapshot',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='project_latest_valid_snapshot', to='metrics.projectsnapshot'),
        ),
        migrations.AddField(
            model_name='project',
            name='updated_by',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='project_updated_by', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='OtherResponse',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('date', models.DateTimeField(db_index=True)),
                ('uid', models.CharField(max_length=128, unique=True)),
                ('raw_data', models.JSONField()),
                ('campaign', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='other_response_campaign', to='metrics.campaign')),
            ],
            options={
                'ordering': ['campaign', '-date'],
            },
        ),
        migrations.CreateModel(
            name='NpsLetterGrade',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=32, unique=True)),
                ('min_score', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(4)])),
                ('color_code', models.CharField(blank=True, max_length=32, null=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='nps_letter_grade_created_by', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='nps_letter_grade_updated_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'NPS letter grade',
                'ordering': ['-min_score'],
            },
        ),
        migrations.CreateModel(
            name='ImportLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('responses_imported_count', models.PositiveIntegerField(blank=True, null=True)),
                ('projects_affected_count', models.PositiveIntegerField(blank=True, null=True)),
                ('run_time_seconds', models.FloatField()),
                ('import_type', models.CharField(choices=[('usabilla', 'Usabilla')], max_length=12)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='usabilla_import_log_user', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='FeedbackResponse',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('date', models.DateTimeField(db_index=True)),
                ('uid', models.CharField(max_length=128, unique=True)),
                ('rating', models.SmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('feedback_type', models.CharField(blank=True, max_length=128)),
                ('comments', models.TextField(blank=True)),
                ('email_provided', models.BooleanField(default=False)),
                ('notes', models.TextField(blank=True, max_length=3000)),
                ('raw_data', models.JSONField()),
                ('assignees', models.ManyToManyField(blank=True, related_name='feedback_response_assignees', to=settings.AUTH_USER_MODEL)),
                ('campaign', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='feedback_response_campaign', to='metrics.campaign')),
                ('keywords', models.ManyToManyField(blank=True, related_name='feedback_response_keywords', to='metrics.FeedbackResponseKeyword')),
            ],
            options={
                'ordering': ['campaign', '-date'],
            },
        ),
        migrations.CreateModel(
            name='DomainYearSnapshot',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('year', models.PositiveIntegerField(default=2023)),
                ('all_projects_count', models.PositiveIntegerField(default=0)),
                ('core_projects_count', models.PositiveIntegerField(default=0)),
                ('core_projects_percent', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('vote_projects_count', models.PositiveIntegerField(default=0)),
                ('vote_projects_percent', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('core_projects_currently_reporting_count', models.PositiveIntegerField(default=0)),
                ('core_projects_currently_reporting_percent', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('core_projects_excellent_nps_count', models.PositiveIntegerField(default=0)),
                ('core_projects_excellent_nps_percent', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('core_projects_nps_target_achieved_count', models.PositiveIntegerField(default=0)),
                ('core_projects_nps_target_achieved_percent', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('core_projects_nps_score_points', models.PositiveIntegerField(default=0)),
                ('core_projects_nps_score_points_average', models.FloatField(default=0)),
                ('core_projects_nps_letter_grade', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='domain_year_snapshot_core_projects_nps_letter_grade', to='metrics.npslettergrade')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='domain_year_snapshot_created_by', to=settings.AUTH_USER_MODEL)),
                ('domain', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='domain_year_snapshot_domain', to='metrics.domain')),
                ('updated_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='domain_year_snapshot_updated_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-year', 'domain'],
            },
        ),
        migrations.AddField(
            model_name='campaign',
            name='project',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='campaign_project', to='metrics.project'),
        ),
        migrations.AddField(
            model_name='campaign',
            name='updated_by',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='campaign_updated_by', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Alert',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(default=django.utils.timezone.now)),
                ('type', models.CharField(choices=[('Great', 'Great'), ('Good', 'Good'), ('Info', 'Info'), ('Warning', 'Warning'), ('Bad', 'Bad'), ('Poop', 'Poop')], max_length=8)),
                ('comments', models.TextField(max_length=3000)),
                ('domain', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='alert_domain', to='metrics.domain')),
                ('project', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='alert_project', to='metrics.project')),
            ],
            options={
                'ordering': ['-date', 'domain', 'project'],
            },
        ),
        migrations.CreateModel(
            name='ActivityLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('object_id', models.PositiveIntegerField(blank=True, null=True)),
                ('comments', models.TextField(max_length=3000)),
                ('content_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='instance_change_user', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='VoteResponse',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('metrics.response',),
        ),
    ]
