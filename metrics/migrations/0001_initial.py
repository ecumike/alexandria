# Generated by Django 3.2.5 on 2021-11-24 18:46

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ActivityLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('object_id', models.PositiveIntegerField(blank=True, null=True)),
                ('comments', models.TextField(max_length=3000)),
            ],
            options={
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='Alert',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(default=django.utils.timezone.now)),
                ('type', models.CharField(choices=[('Great', 'Great'), ('Good', 'Good'), ('Info', 'Info'), ('Warning', 'Warning'), ('Bad', 'Bad'), ('Poop', 'Poop')], max_length=8)),
                ('comments', models.TextField(max_length=3000)),
            ],
            options={
                'ordering': ['-date', 'domain', 'project'],
            },
        ),
        migrations.CreateModel(
            name='Browser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=64, unique=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Campaign',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('inactive', models.BooleanField(default=False)),
                ('uid', models.CharField(blank=True, max_length=128, null=True)),
                ('usabilla_button_id', models.CharField(blank=True, max_length=128, null=True)),
                ('key', models.CharField(blank=True, max_length=128, null=True, unique=True)),
                ('latest_response_date', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'ordering': ['uid'],
            },
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=64, unique=True)),
            ],
            options={
                'verbose_name_plural': 'Cities',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=64, unique=True)),
            ],
            options={
                'verbose_name_plural': 'Countries',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='DataSource',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=64, unique=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='DeviceType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=32, unique=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Domain',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=64, unique=True)),
                ('beeheard_id', models.PositiveIntegerField(default=0)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='DomainYearSnapshot',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('year', models.PositiveIntegerField(default=2021)),
                ('designer_assigned_count', models.PositiveIntegerField(default=0)),
                ('designer_assigned_percent', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('all_projects_count', models.PositiveIntegerField(default=0)),
                ('core_projects_count', models.PositiveIntegerField(default=0)),
                ('core_projects_percent', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('vote_projects_count', models.PositiveIntegerField(default=0)),
                ('vote_projects_percent', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('core_projects_currently_reporting_count', models.PositiveIntegerField(default=0)),
                ('core_projects_currently_reporting_percent', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('core_projects_excellent_nps_count', models.PositiveIntegerField(default=0)),
                ('core_projects_excellent_nps_percent', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('core_projects_nps_target_achieved_count', models.PositiveIntegerField(default=0)),
                ('core_projects_nps_target_achieved_percent', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('core_projects_nps_score_points', models.PositiveIntegerField(default=0)),
                ('core_projects_nps_score_points_average', models.FloatField(default=0)),
            ],
            options={
                'ordering': ['-year', 'domain'],
            },
        ),
        migrations.CreateModel(
            name='FeedbackResponse',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('date', models.DateTimeField(db_index=True)),
                ('uid', models.CharField(max_length=128, unique=True)),
                ('rating', models.SmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('feedback_type', models.CharField(blank=True, max_length=128)),
                ('comments', models.TextField(blank=True)),
                ('email_provided', models.BooleanField(default=False)),
                ('raw_data', models.JSONField()),
            ],
            options={
                'ordering': ['campaign', '-date'],
            },
        ),
        migrations.CreateModel(
            name='GoalCompleted',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=32, unique=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='GoalCompletedCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=32, unique=True)),
                ('min_score_range', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('max_score_range', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('color_code', models.CharField(max_length=32)),
                ('text_color_code', models.CharField(blank=True, max_length=32, null=True)),
            ],
            options={
                'verbose_name_plural': 'Goal completed categories',
                'ordering': ['-max_score_range'],
            },
        ),
        migrations.CreateModel(
            name='NpsLetterGrade',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=32, unique=True)),
                ('min_score', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(4)])),
                ('color_code', models.CharField(blank=True, max_length=32, null=True)),
            ],
            options={
                'verbose_name': 'NPS letter grade',
                'ordering': ['-min_score'],
            },
        ),
        migrations.CreateModel(
            name='NpsScoreCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=32, unique=True)),
                ('min_score_range', models.FloatField(validators=[django.core.validators.MinValueValidator(-100), django.core.validators.MaxValueValidator(100)])),
                ('max_score_range', models.FloatField(validators=[django.core.validators.MinValueValidator(-100), django.core.validators.MaxValueValidator(100)])),
                ('color_code', models.CharField(blank=True, max_length=32, null=True)),
                ('text_color_code', models.CharField(blank=True, max_length=32, null=True)),
                ('ux_points', models.PositiveIntegerField(default=0)),
            ],
            options={
                'verbose_name': 'NPS category',
                'verbose_name_plural': 'NPS categories',
                'ordering': ['-max_score_range'],
            },
        ),
        migrations.CreateModel(
            name='OperatingSystem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=32, unique=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='OtherResponse',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('date', models.DateTimeField(db_index=True)),
                ('uid', models.CharField(max_length=128, unique=True)),
                ('raw_data', models.JSONField()),
            ],
            options={
                'ordering': ['campaign', '-date'],
            },
        ),
        migrations.CreateModel(
            name='PrimaryGoal',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=128, unique=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('inactive', models.BooleanField(default=False)),
                ('name', models.CharField(max_length=64, unique=True)),
                ('priority', models.IntegerField(blank=True, choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5')], null=True)),
                ('private_comments', models.BooleanField(default=False)),
                ('url', models.URLField(blank=True, max_length=255, null=True)),
                ('estimated_num_users', models.PositiveIntegerField(blank=True, null=True)),
                ('core_project', models.BooleanField(default=False)),
                ('designer_assigned', models.CharField(blank=True, choices=[('no', 'No'), ('yes', 'Yes')], default='', max_length=3, null=True)),
                ('vendor_app', models.CharField(blank=True, choices=[('no', 'No'), ('yes', 'Yes')], default='', max_length=3)),
                ('comments', models.TextField(blank=True)),
                ('beeheard_id', models.PositiveIntegerField(default=0)),
                ('api_key', models.CharField(blank=True, max_length=16, null=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ProjectEvent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255)),
                ('date', models.DateField()),
            ],
            options={
                'ordering': ['project', '-date'],
            },
        ),
        migrations.CreateModel(
            name='ProjectKeyword',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=64, unique=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ProjectSnapshot',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('entry_type', models.CharField(blank=True, choices=[('manual', 'Manual'), ('automatic import', 'Automatic import')], default='manual', max_length=20)),
                ('date', models.DateField(blank=True, null=True)),
                ('date_period', models.CharField(blank=True, choices=[('month', 'Month'), ('quarter', 'Quarter'), ('last90', 'Last 90 days')], default='quarter', max_length=12)),
                ('date_quarter', models.PositiveIntegerField(blank=True, null=True)),
                ('date_month', models.PositiveIntegerField(blank=True, null=True)),
                ('nps_score', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(-100), django.core.validators.MaxValueValidator(100)])),
                ('nps_score_date', models.DateTimeField(blank=True, null=True)),
                ('nps_count', models.PositiveIntegerField(blank=True, null=True)),
                ('nps_promoter_count', models.PositiveIntegerField(blank=True, null=True)),
                ('nps_passive_count', models.PositiveIntegerField(blank=True, null=True)),
                ('nps_detractor_count', models.PositiveIntegerField(blank=True, null=True)),
                ('nps_margin_error', models.FloatField(blank=True, null=True)),
                ('nps_margin_error_lower', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(-100), django.core.validators.MaxValueValidator(100)])),
                ('nps_margin_error_upper', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(-100), django.core.validators.MaxValueValidator(100)])),
                ('nps_meaningful_data', models.BooleanField(default=False)),
                ('umux_score', models.FloatField(blank=True, null=True)),
                ('umux_score_date', models.DateTimeField(blank=True, null=True)),
                ('umux_count', models.PositiveIntegerField(blank=True, null=True)),
                ('umux_scores_sum', models.FloatField(blank=True, null=True)),
                ('umux_capability_avg', models.FloatField(blank=True, null=True)),
                ('umux_ease_of_use_avg', models.FloatField(blank=True, null=True)),
                ('umux_margin_error', models.FloatField(blank=True, null=True)),
                ('umux_margin_error_lower', models.FloatField(blank=True, null=True)),
                ('umux_margin_error_upper', models.FloatField(blank=True, null=True)),
                ('umux_meaningful_data', models.BooleanField(default=False)),
                ('goal_completed_percent', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('goal_completed_date', models.DateTimeField(blank=True, null=True)),
                ('goal_completed_count', models.PositiveIntegerField(blank=True, null=True)),
                ('response_day_range', models.PositiveIntegerField(blank=True, null=True)),
                ('meaningful_response_count', models.PositiveIntegerField(blank=True, null=True)),
            ],
            options={
                'ordering': ['project', '-date'],
            },
        ),
        migrations.CreateModel(
            name='ProjectYearSetting',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('year', models.PositiveIntegerField(default=2021)),
                ('nps_target', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(-100), django.core.validators.MaxValueValidator(100)])),
                ('nps_target_exceed', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(-100), django.core.validators.MaxValueValidator(100)])),
                ('nps_baseline', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(-100), django.core.validators.MaxValueValidator(100)], verbose_name='NPS baseline')),
                ('nps_baseline_created_at', models.DateTimeField(blank=True, null=True, verbose_name='NPS baseline created at')),
                ('nps_baseline_response_count', models.PositiveIntegerField(blank=True, null=True, verbose_name='NPS baseline reponse count')),
                ('nps_baseline_margin_error', models.FloatField(blank=True, null=True, verbose_name='NPS baseline MOE')),
                ('nps_baseline_entry_type', models.CharField(blank=True, choices=[('automatic', 'Automatic'), ('manual', 'Manual')], max_length=12)),
                ('nps_baseline_from', models.CharField(blank=True, max_length=64, verbose_name='NPS baseline from')),
                ('nps_baseline_last_response_at', models.DateTimeField(blank=True, null=True, verbose_name='NPS baseline last response')),
                ('nps_baseline_response_day_range', models.PositiveIntegerField(blank=True, null=True)),
                ('nps_baseline_notes', models.TextField(blank=True, verbose_name='NPS baseline notes')),
                ('umux_target', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('umux_target_exceed', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('umux_baseline', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='UMUX baseline')),
                ('umux_baseline_created_at', models.DateTimeField(blank=True, null=True, verbose_name='UMUX baseline created at')),
                ('umux_baseline_response_count', models.PositiveIntegerField(blank=True, null=True, verbose_name='UMUX baseline reponse count')),
                ('umux_baseline_margin_error', models.FloatField(blank=True, null=True, verbose_name='UMUX baseline MOE')),
                ('umux_baseline_entry_type', models.CharField(blank=True, choices=[('automatic', 'Automatic'), ('manual', 'Manual')], max_length=12)),
                ('umux_baseline_from', models.CharField(blank=True, max_length=64, verbose_name='UMUX baseline from')),
                ('umux_baseline_last_response_at', models.DateTimeField(blank=True, null=True, verbose_name='UMUX baseline last response')),
                ('umux_baseline_response_day_range', models.PositiveIntegerField(blank=True, null=True)),
                ('umux_baseline_notes', models.TextField(blank=True, verbose_name='UMUX baseline notes')),
            ],
            options={
                'ordering': ['-year', 'project'],
            },
        ),
        migrations.CreateModel(
            name='Response',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('uid', models.CharField(max_length=128, unique=True)),
                ('date', models.DateTimeField(db_index=True)),
                ('nps', models.SmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('nps_category', models.CharField(blank=True, choices=[('promoter', 'Promoter'), ('passive', 'Passive'), ('detractor', 'Detractor')], db_index=True, max_length=12)),
                ('umux_capability', models.SmallIntegerField(blank=True, db_index=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(7)])),
                ('umux_ease_of_use', models.SmallIntegerField(blank=True, db_index=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(7)])),
                ('umux_score', models.FloatField(blank=True, null=True)),
                ('improvement_suggestion', models.TextField(blank=True)),
                ('primary_goal_other', models.TextField(blank=True)),
                ('goal_not_completed_reason', models.TextField(blank=True)),
                ('comments', models.TextField(blank=True)),
                ('email_provided', models.BooleanField(default=False)),
                ('location', models.CharField(blank=True, max_length=128)),
                ('total_time', models.PositiveIntegerField(default=0)),
                ('raw_data', models.JSONField()),
            ],
            options={
                'ordering': ['campaign', '-date'],
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=64, unique=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='State',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=64, unique=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Target',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('nps_score', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(-100), django.core.validators.MaxValueValidator(100)])),
                ('umux_score', models.FloatField(blank=True, null=True)),
                ('achieve_target', models.FloatField(blank=True, null=True)),
                ('exceed_target', models.FloatField(blank=True, null=True)),
            ],
            options={
                'ordering': ['-nps_score', '-umux_score'],
            },
        ),
        migrations.CreateModel(
            name='Url',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('url', models.TextField(max_length=5000)),
            ],
            options={
                'ordering': ['url'],
            },
        ),
        migrations.CreateModel(
            name='UserRole',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=64, unique=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='UxSpecialistAssigned',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('date', models.DateField(default=django.utils.timezone.now)),
                ('assigned', models.BooleanField(default=False)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='ux_specialist_assigned_created_by', to=settings.AUTH_USER_MODEL)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ux_specialist_assigned_project', to='metrics.project')),
            ],
            options={
                'ordering': ['-date', '-created_at', '-project'],
            },
        ),
        migrations.CreateModel(
            name='UsabillaImportLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('responses_imported_count', models.PositiveIntegerField(blank=True, null=True)),
                ('projects_affected_count', models.PositiveIntegerField(blank=True, null=True)),
                ('run_time_seconds', models.FloatField()),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='usabilla_import_log_user', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='UmuxScoreCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=32, unique=True)),
                ('min_score_range', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('max_score_range', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('color_code', models.CharField(max_length=32)),
                ('text_color_code', models.CharField(blank=True, max_length=32, null=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='umux_score_category_created_by', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='umux_score_category_updated_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'UMUX score category',
                'verbose_name_plural': 'UMUX score categories',
                'ordering': ['-max_score_range'],
            },
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=128, unique=True)),
                ('frequency', models.CharField(blank=True, choices=[('Daily', 'Daily'), ('Weekly', 'Weekly'), ('Monthly', 'Monthly'), ('Quarterly', 'Quarterly'), ('Yearly', 'Yearly'), ('> Yearly', '> Yearly')], max_length=12, null=True)),
                ('score', models.FloatField(default=0)),
                ('ease', models.FloatField(default=0)),
                ('current_friction', models.FloatField(default=0)),
                ('target_friction', models.FloatField(default=0)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='task_created_by', to=settings.AUTH_USER_MODEL)),
                ('parent_task', models.ForeignKey(blank=True, help_text='If a subtask, choose what parent task it belongs to', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='task_parent_task', to='metrics.task')),
                ('projects', models.ManyToManyField(blank=True, help_text='Select associated tools/services. In addition to listing them, all their tagged research auto-populates the research section.', related_name='task_projects', to='metrics.Project')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
    ]
